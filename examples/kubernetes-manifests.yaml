# Zama Jobs API - Kubernetes Deployment Manifests
# This file contains all the necessary Kubernetes manifests for deploying the Zama Jobs API

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: zama-jobs-api
  labels:
    name: zama-jobs-api
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: zama-jobs-api
data:
  NODE_ENV: "production"
  PORT: "3000"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "zamajobs"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  KONG_DB_HOST: "postgres-kong-service"
  KONG_DB_PORT: "5432"
  KONG_DB_NAME: "kong"
  API_VERSION: "v1"

---
# Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: zama-jobs-api
type: Opaque
data:
  # Replace these with actual base64-encoded values
  DB_PASSWORD: <base64-encoded-password>
  REDIS_PASSWORD: <base64-encoded-password>
  JWT_SECRET: <base64-encoded-jwt-secret>
  ZAMA_GATEWAY_KEY: <base64-encoded-zama-key>
  PRIVATE_KEY: <base64-encoded-private-key>

---
# API Server Deployment (v1)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server-v1
  namespace: zama-jobs-api
  labels:
    app: api-server
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-server
      version: v1
  template:
    metadata:
      labels:
        app: api-server
        version: v1
    spec:
      containers:
      - name: api-server
        image: zama/jobs-api:v1.0.0
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_NAME
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: REDIS_PORT
        - name: API_VERSION
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: API_VERSION
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: JWT_SECRET
        - name: ZAMA_GATEWAY_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: ZAMA_GATEWAY_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /v1/health?type=liveness
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /v1/health?type=readiness
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]

---
# API Service (v1)
apiVersion: v1
kind: Service
metadata:
  name: api-service-v1
  namespace: zama-jobs-api
  labels:
    app: api-server
    version: v1
spec:
  selector:
    app: api-server
    version: v1
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP

---
# Job Workers Deployment (v1)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: job-workers-v1
  namespace: zama-jobs-api
  labels:
    app: job-workers
    version: v1
spec:
  replicas: 5
  selector:
    matchLabels:
      app: job-workers
      version: v1
  template:
    metadata:
      labels:
        app: job-workers
        version: v1
    spec:
      containers:
      - name: worker
        image: zama/jobs-workers:v1.0.0
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: NODE_ENV
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_NAME
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: REDIS_PORT
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: REDIS_PASSWORD
        - name: ZAMA_GATEWAY_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: ZAMA_GATEWAY_KEY
        - name: PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: PRIVATE_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 30"]

---
# Kong Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-gateway
  namespace: zama-jobs-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kong-gateway
  template:
    metadata:
      labels:
        app: kong-gateway
    spec:
      containers:
      - name: kong
        image: kong:3.4
        ports:
        - name: proxy
          containerPort: 8000
        - name: proxy-ssl
          containerPort: 8443
        - name: admin
          containerPort: 8001
        env:
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_PG_HOST
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: KONG_DB_HOST
        - name: KONG_PG_PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: KONG_DB_PORT
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: DB_PASSWORD
        - name: KONG_PG_DATABASE
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: KONG_DB_NAME
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_NGINX_DAEMON
          value: "off"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Kong Service
apiVersion: v1
kind: Service
metadata:
  name: kong-service
  namespace: zama-jobs-api
spec:
  selector:
    app: kong-gateway
  ports:
  - name: proxy
    port: 80
    targetPort: 8000
  - name: proxy-ssl
    port: 443
    targetPort: 8443
  - name: admin
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
# PostgreSQL StatefulSet for main database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: zama-jobs-api
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB_NAME
        - name: POSTGRES_USER
          value: "zamauser"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - zamauser
            - -d
            - zamajobs
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - zamauser
            - -d
            - zamajobs
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 20Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: zama-jobs-api
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: zama-jobs-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)", "--appendonly", "yes"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: zama-jobs-api
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "fast-ssd"
  resources:
    requests:
      storage: 5Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: zama-jobs-api
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Ingress with SSL/TLS and routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  namespace: zama-jobs-api
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
spec:
  tls:
  - hosts:
    - api.zama.io
    secretName: api-tls-secret
  rules:
  - host: api.zama.io
    http:
      paths:
      - path: /v1
        pathType: Prefix
        backend:
          service:
            name: kong-service
            port:
              number: 80
      - path: /v2
        pathType: Prefix
        backend:
          service:
            name: kong-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler for API Servers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-server-hpa
  namespace: zama-jobs-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-server-v1
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Horizontal Pod Autoscaler for Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: workers-hpa
  namespace: zama-jobs-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: job-workers-v1
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: zama-jobs-api-netpol
  namespace: zama-jobs-api
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: kong-gateway
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - {} # Allow egress to external services (blockchain, Zama Gateway)

---
# Service Monitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: zama-jobs-api-monitor
  namespace: zama-jobs-api
  labels:
    app: zama-jobs-api
spec:
  selector:
    matchLabels:
      app: api-server
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

---
# Pod Disruption Budget for API servers
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-server-pdb
  namespace: zama-jobs-api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-server

---
# Pod Disruption Budget for Workers
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: workers-pdb
  namespace: zama-jobs-api
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: job-workers